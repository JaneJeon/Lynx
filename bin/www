#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http')
const app = require('../app')
const log = require('../lib/logger')
const closeConns = require('../lib/close-connections')
const setupDB = require('../lib/setup-db')

log.info('Starting server under %s environment...', process.env.NODE_ENV)

/**
 * Get port from environment.
 */
const port = normalizePort(process.env.PORT)
app.set('port', port)

/**
 * Create HTTP server.
 */
const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces
 */
log.info('Setting up DB...')
setupDB()
  .then(() => {
    log.info('Successfully set up DB. Starting server...')
    server.listen(port).on('error', onError).on('listening', onListening)
  })
  .catch(err => {
    log.error(err, 'Encountered a problem setting up DB. Shutting down...')
    process.exit(1)
  })

/**
 * Graceful shutdown for pm2/docker
 */
const gracefulShutdown = () => {
  log.info('Received shutdown signal. Closing connections...')

  server.close(async err => {
    // https://nodejs.org/api/net.html#net_server_close_callback
    if (err) {
      log.error(err, 'Encountered a problem shutting down server, exiting!')
      return process.exit(1)
    }

    await closeConns()
    process.exit(0)
  })
}
process.on('SIGINT', gracefulShutdown)
process.on('SIGTERM', gracefulShutdown)

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges')
      process.exit(1)
    // eslint-disable-next-line no-fallthrough
    case 'EADDRINUSE':
      log.error(bind + ' is already in use')
      process.exit(1)
    // eslint-disable-next-line no-fallthrough
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  log.info('Server listening on ' + bind)
}
